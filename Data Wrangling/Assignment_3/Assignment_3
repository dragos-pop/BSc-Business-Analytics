{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Assignment 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "cd3ecc13604d15a89bbb1bebcb80e5c5",
     "grade": false,
     "grade_id": "libraries",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "pd.options.display.max_rows = 20\n",
    "np.set_printoptions(precision=4, suppress=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Datetime manipulations\n",
    "\n",
    "The Data Wrangling course started on Monday 7 January 2019 at 9 am and will end on Friday 1 February at 5.15 pm. Calculate the duration of the course in minutes. Assign the value to the variable *duration*.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "aeb1c889f8320b7d9a070dacd5e16230",
     "grade": false,
     "grade_id": "duration",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "from datetime import datetime\n",
    "\n",
    "# YOUR CODE HERE\n",
    "\n",
    "# The formulation of the excercie is contradictory: On one hand it says the course \"will end\" on 1st of Feb, which\n",
    "# which suggests that the year of the ending date is 2020. On the other hand, 1st of Feb was on a Friday in 2019, \n",
    "# which indicate that the year of the ending date is 2019.\n",
    "\n",
    "from dateutil.parser import parse\n",
    "duration = (parse('Friday 1 February at 5:15 pm 2019') - parse('Monday 7 January 2019 at 9 am')).total_seconds()/60\n",
    "# duration = (datetime(2019, 2, 1, 17, 15) - datetime(2019, 1, 7, 9)).total_seconds()/60\n",
    "# YOUR CODE ENDS HERE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "9044ca0654023b062c7bfa59fc951c9e",
     "grade": true,
     "grade_id": "duration-correct",
     "locked": true,
     "points": 1,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "36495.0\n"
     ]
    }
   ],
   "source": [
    "print(duration)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below you will find the scheduled days of the course Data Wrangling. The values in the time series denote the number of contact hours spend on each lecture. Create a time series that calculates the cumulative sum of all the hours that you have spent on the course. Assign the cumulate sum on 29 January 2019 to the variable *cum_hours*."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "0e7cf41a6adc34e0f94ea69e035392a5",
     "grade": false,
     "grade_id": "cum-hours",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "from datetime import datetime\n",
    "from pandas.tseries.offsets import *\n",
    "\n",
    "\n",
    "dates = [datetime(2019, 1, 7), datetime(2019, 1, 8), datetime(2019, 1, 10),\n",
    "         datetime(2019, 1, 14), datetime(2019, 1, 15), datetime(2019, 1, 17),\n",
    "         datetime(2019, 1, 21), datetime(2019, 1, 22), datetime(2019, 1, 24),\n",
    "         datetime(2019, 1, 30), datetime(2019, 1, 31), datetime(2019, 2, 1)]\n",
    "ts = pd.Series([2, 2, 1, 2, 2, 1, 2, 2, 1, 3, 3, 3], index = dates)\n",
    "\n",
    "# YOUR CODE HERE\n",
    "from dateutil.parser import parse\n",
    "cumulative_sum = np.cumsum(ts)\n",
    "cum_hours = cumulative_sum[:parse('29 January 2019')][-1]\n",
    "# YOUR CODE ENDS HERE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "0dba47d1bb8480c0ffcd2556583c30e5",
     "grade": true,
     "grade_id": "cum-hours-correct",
     "locked": true,
     "points": 1,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15\n"
     ]
    }
   ],
   "source": [
    "print(cum_hours)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Suppose that you want to become a world-class expert in data wrangling. So, you decide to spent 2 hours learning data wrangling every Tuesday in 2019. As you have a lot of free time every first Wednesday of the month, you spent 3 hours learning data wrangling those days in 2019. Calculate how many hours you will spend learning in 2019. Assign that value to the variable *study_hours*."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "6e6875e3349fbda5ae02e40071f53a86",
     "grade": false,
     "grade_id": "study-hours",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "from datetime import datetime\n",
    "\n",
    "# YOUR CODE HERE\n",
    "study_hours = 2 * len(pd.date_range('2019-01-01', '2019-12-31', freq = 'W-TUE')) + 3 * len(pd.date_range('2019-01-01', '2019-12-31', freq = 'WOM-1WED'))\n",
    "# YOUR CODE ENDS HERE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "2e394010963ab733827d6c653a828c51",
     "grade": true,
     "grade_id": "study-hours-correct",
     "locked": true,
     "points": 1,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "142\n"
     ]
    }
   ],
   "source": [
    "print(study_hours)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Generate all business days in 2019 that start at the first weekday of the month. Calculate how many of these days fall on the second day of the month. Assign that value to the variable *second_days*."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "9ef729db1f5960ec939011ed0aa0145e",
     "grade": false,
     "grade_id": "second-days",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "from datetime import datetime\n",
    "\n",
    "# YOUR CODE HERE\n",
    "first_weekday_month = pd.date_range('2019-01-01', '2019-12-31', freq = 'BMS')\n",
    "second_days = sum(i == 2 for i in first_weekday_month.day)\n",
    "# YOUR CODE ENDS HERE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "0f49f849772ca0aeb1a306a12e9c6c9a",
     "grade": true,
     "grade_id": "second-days-correct",
     "locked": true,
     "points": 1,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n"
     ]
    }
   ],
   "source": [
    "print(second_days)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The blood moon was best visible on 21 January 2019 at 05.41 am in Amsterdam. Calculate what the time was in Sydney (Australia) at that exact moment. Assign the answer to *bloodmoon*."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "8e3bf541cf5e5d3e7887e9c89156b798",
     "grade": false,
     "grade_id": "bloodmoon",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "from datetime import datetime\n",
    "import pytz\n",
    "\n",
    "# YOUR CODE HERE\n",
    "from dateutil.parser import parse\n",
    "bloodmoon = pd.Timestamp(parse('21 January 2019 at 05:41 am'), tz ='Europe/Amsterdam').tz_convert('Australia/Sydney')\n",
    "# YOUR CODE ENDS HERE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "c1f947d711536ef3bc0a4538eea59e57",
     "grade": true,
     "grade_id": "bloodmoon-correct",
     "locked": true,
     "points": 1,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2019-01-21 15:41:00+11:00\n"
     ]
    }
   ],
   "source": [
    "print(bloodmoon)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Sales volumes\n",
    "\n",
    "The file *volume.csv* contains sales volumes of different companies. Read the file, and calculate the mean sales volumes of each company in the year 2010. Assign the series to the variable *volumes2010*. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "74e7b46a16b7c768cf2d074539bcf9fe",
     "grade": false,
     "grade_id": "volumes2010",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "file = 'volume.csv'\n",
    "\n",
    "# YOUR CODE HERE\n",
    "volume = pd.read_csv(file, index_col=0, header=0, parse_dates=True)\n",
    "volumes2010 = volume['2010'].mean()\n",
    "# YOUR CODE ENDS HERE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "6046a8c483b6550d9ba1a3365c422f16",
     "grade": true,
     "grade_id": "volumes2010-correct",
     "locked": true,
     "points": 1,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AA      3.113912e+07\n",
      "AAPL    2.140376e+07\n",
      "GE      7.223856e+07\n",
      "IBM     6.422816e+06\n",
      "JNJ     1.214678e+07\n",
      "MSFT    6.306716e+07\n",
      "PEP     6.962504e+06\n",
      "SPX     4.566245e+09\n",
      "XOM     2.643224e+07\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print(volumes2010)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In which year did the sales volume of Apple (*AAPL*) overtake the sales volume of Microsoft (*MSFT*)? Calculate the value and assign the timestamp to the variable *changeover*."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "d747e44e69c39974fe452219f3364247",
     "grade": false,
     "grade_id": "changeover",
     "locked": false,
     "schema_version": 1,
     "solution": true
    },
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1990 : -14908756800.0\n",
      "1991 : -15086789200.0\n",
      "1992 : -14024811200.0\n",
      "1993 : -14217358000.0\n",
      "1994 : -14951071600.0\n",
      "1995 : -16610394800.0\n",
      "1996 : -16364521200.0\n",
      "1997 : -13846300000.0\n",
      "1998 : -10897611200.0\n",
      "1999 : -10175485000.0\n",
      "2000 : -15797261200.0\n",
      "2001 : -15538016600.0\n",
      "2002 : -16629229400.0\n",
      "2003 : -13854872700.0\n",
      "2004 : -12481961100.0\n",
      "2005 : -10272029700.0\n",
      "2006 : -9128982100.0\n",
      "2007 : -6838687000.0\n",
      "2008 : -11081583600.0\n",
      "2009 : -10616266300.0\n",
      "2010 : -10499176600.0\n",
      "2011 : -8946034800.0\n"
     ]
    }
   ],
   "source": [
    "file = 'volume.csv'\n",
    "\n",
    "# YOUR CODE HERE\n",
    "volume = pd.read_csv(file, index_col=0, header=0, parse_dates=True)\n",
    "for i in range(1990, 2012):\n",
    "    print(i, ':', volume[str(i)]['AAPL'].sum() - volume[str(i)]['MSFT'].sum())\n",
    "# Apparently, the annual sales volume of Apple never overtook Microsoft.\n",
    "\n",
    "days_apple_overtook_microsoft = []\n",
    "for i in volume.index:\n",
    "    if volume.at[i, 'AAPL'] > volume.at[i, 'MSFT']:\n",
    "        days_apple_overtook_microsoft.append(i)\n",
    "\n",
    "changeover = days_apple_overtook_microsoft[0] # first time Apple's sales volume overook Microsoft's\n",
    "# YOUR CODE ENDS HERE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "4b91c6e097d68ee5a1b12127fa81b034",
     "grade": true,
     "grade_id": "changeover-correct",
     "locked": true,
     "points": 1,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1992-08-06 00:00:00\n"
     ]
    }
   ],
   "source": [
    "print(changeover)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Format the date that you have found in a nicer way corresponding to the style dd/mm/yy. Thus, the day (dd), month (mm), and the year (yy) are formatted in 2 digits, separated by slashes. Assign the value to the variable *nicedate*."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "6591ac685a74b0e965949d2ac5895758",
     "grade": false,
     "grade_id": "nicedate",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "# YOUR CODE HERE\n",
    "nicedate = changeover.strftime('%d/%m/%y')\n",
    "# YOUR CODE ENDS HERE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "9319d4c70f404ca91d2f25003bcc726c",
     "grade": true,
     "grade_id": "nicedate-correct",
     "locked": true,
     "points": 1,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "06/08/92\n"
     ]
    }
   ],
   "source": [
    "print(nicedate)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Apple has to report every end of the year (31 December) what its current sales volume is (not cumulative!). Create a time series for every year with the sales volume listed for Apple (AAPL) on 31 December. If the data does not contain a record for this date, then take the last known value that this known prior to that date. Assign the time series to the variable *apple_report*."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "2245c815d9ebe931674d554731508b2f",
     "grade": false,
     "grade_id": "apple-report",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "# YOUR CODE HERE\n",
    "apple_report = volume['AAPL'].asfreq('Y', how='end', method='ffill')\n",
    "# YOUR CODE ENDS HERE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "e1820b4a996de582a54bd43172b4d08b",
     "grade": true,
     "grade_id": "apple-report-correct",
     "locked": true,
     "points": 1,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1990-12-31     1593200.0\n",
      "1991-12-31     4802000.0\n",
      "1992-12-31     3302000.0\n",
      "1993-12-31     5765200.0\n",
      "1994-12-31     2616400.0\n",
      "1995-12-31    10874400.0\n",
      "1996-12-31    13719200.0\n",
      "1997-12-31    14531200.0\n",
      "1998-12-31     9716400.0\n",
      "1999-12-31     5856400.0\n",
      "                 ...    \n",
      "2001-12-31     4920800.0\n",
      "2002-12-31     7168800.0\n",
      "2003-12-31     6230400.0\n",
      "2004-12-31     9949600.0\n",
      "2005-12-31    22295100.0\n",
      "2006-12-31    38443900.0\n",
      "2007-12-31    19261900.0\n",
      "2008-12-31    21697900.0\n",
      "2009-12-31    12586100.0\n",
      "2010-12-31     6911000.0\n",
      "Freq: A-DEC, Name: AAPL, Length: 21, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print(apple_report)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The volumes of Apple are highly fluctuating over time. You can clearly see that when you make a plot. It would be better to smooth out the sales volume by taking a moving average with a period of 200 days. Calculate the moving average of the sales volume and assign to the variable *apple_smooth*. Create a plot with the original time series and the smooth version of the time series."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "96caa2815343895894055cb91b9e191d",
     "grade": false,
     "grade_id": "apple-smooth",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# YOUR CODE HERE\n",
    "apple_smooth = volume['AAPL'].rolling('200D').mean()\n",
    "volume['AAPL'].plot()\n",
    "apple_smooth.plot(title=\"Apple time series\");\n",
    "# YOUR CODE ENDS HERE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "e85f6595c0b5d34bc9ee753ddb420e9f",
     "grade": true,
     "grade_id": "apple-smooth-correct",
     "locked": true,
     "points": 1,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
